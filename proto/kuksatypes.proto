// Copyright Robert Bosch GmbH, 2021. Part of the Eclipse Kuksa Project.
//
// All rights reserved. This configuration file is provided to you under the
// terms and conditions of the Eclipse Distribution License v1.0 which
// accompanies this distribution, and is available at
// http://www.eclipse.org/org/documents/edl-v10.php

syntax = "proto3";

// I added V1 as in databroker. Is this good practice?
package kuksa.val.types;
import "google/protobuf/timestamp.proto";

//A VSS value, where path is a VSS path in format /Some/VSS/path
//Attribute type defaults to CURRENT_VALUE
message Value {
  string path = 1;
  AttributeType attribute = 2;

  oneof value {
    uint32 uint32_value      = 3;
    int32 int32_value        = 4;
    uint64 uint64_value      = 5;
    int64 int64_value        = 6;
    bool bool_value          = 7;
    float float_value        = 8;
    double double_value      = 9;
    string string_value      = 10;
    StringArray string_array = 21;
    BoolArray bool_array     = 22;
    Int32Array int32_array   = 23;
    Int64Array int64_array   = 24;
    Uint32Array uint32_array = 25;
    Uint64Array uint64_array = 26;
    FloatArray float_array   = 27;
    DoubleArray double_array = 28;
  }

  google.protobuf.Timestamp timestamp = 99;
}

enum AttributeType {
  ATTRIBUTE_TYPE_CURRENT_VALUE = 0; //this is default
  ATTRIBUTE_TYPE_TARGET_VALUE  = 1;
  ATTRIBUTE_TYPE_METADATA      = 2;
}


// This is a value with an optional Status message to indicate
// errors
message ResponseValue {
  Value value             = 1;
  Status status           = 2;
}

// A VSS path in the for /Vehicle/some/path
// If Attribute is omitted,  attribute=CURRENT_VALUE
message AttributedPath {
  AttributeType attribute = 1;
  string path             = 2; 
}

message StringArray {
  repeated string values = 1;
}

message BoolArray {
  repeated bool values = 1;
}

message Int32Array {
  repeated sint32 values = 1;
}

message Int64Array {
  repeated sint64 values = 1;
}

message Uint32Array {
  repeated uint32 values = 1;
}

message Uint64Array {
  repeated uint64 values = 1;
}

message FloatArray {
  repeated float values = 1;
}

message DoubleArray {
  repeated double values = 1;
}


// General status. Statusresponse shall be an HTTP-like code
message Status {
  uint32 status_code        = 1;
  string status_description = 2;
}