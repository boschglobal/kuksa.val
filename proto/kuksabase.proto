// Copyright Robert Bosch GmbH, 2022. Part of the Eclipse Kuksa Project.
//
// All rights reserved. This configuration file is provided to you under the
// terms and conditions of the Eclipse Distribution License v1.0 which
// accompanies this distribution, and is available at
// http://www.eclipse.org/org/documents/edl-v10.php

// This is a base proto file for databroker and kuksa-val-basic
// function set

syntax = "proto3";

package kuksa.val;

import "kuksatypes.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";


option go_package = "/kuksa_grpc_proto";

/*
Note on autorization: We assume to send auth-token or auth-uuid in metadata
Token is a JWT compliant token as the examples found here:
https://github.com/eclipse/kuksa.val/tree/master/kuksa_certificates/jwt
See also https://github.com/eclipse/kuksa.val/blob/master/doc/jwt.md
Upon reception of auth-token, server shall generate an auth_uuid in metadata
that the client can use instead of auth_token in subsequent calls.
*/

// The connecting service definition.
service VAL {
  // Returns a list of requested data points.
  rpc Get(GetRequest) returns (GetResponse);

  // Sets a list of requests
  rpc Set(SetRequest) returns (SetResponse);
  
  // Subscribe to a set of data points or conditional expressions
  // using the Data Broker Query Syntax (described in QUERY.md)
  // Do we want to have two calls? One simple one Query?
  // Or OneOf in Request?
  //
  // Returns a stream of replies.
  //
  // InvalidArgument is returned if the request is malformed.
  rpc Subscribe(SubscribeRequest) returns (stream SubscribeResponse);

  // Shall return a string identifier that allows the client to determine with what
  // server/server implementation/version it is talking
  // eg. kuksa-databroker 0.5.1
  rpc GetServerIdentification(google.protobuf.Empty) returns (google.protobuf.StringValue);
}

// Request a number of VSS paths. 
message GetRequest {
  repeated kuksa.val.types.AttributedPath datapoints = 1;
}


// Status is overall status, the datapoints may contain 
// individual status information
message GetResponse {
  repeated kuksa.val.types.ResponseValue datapoints = 1;
  kuksa.val.types.Status status                     = 2;
}

// A list of datapoints to be set
message SetRequest {
  repeated kuksa.val.types.Value datapoints = 2;
}

// Usually it is fine to only return global status for set requests.
// It is possible to return status messages for indiviudal VSS
// paths. It is not expected that you get a ResponseValue for 
// all set points, or that they contain any value
message SetResponse {
  kuksa.val.types.Status status = 1;
  repeated kuksa.val.types.ResponseValue dpresponse = 2;
}


// A subscribe request either subscribes a simple AttributedPath
// or can be given in form of an SQL query
// Simple queries shall be supported by all implementations
message SubscribeRequest {
  oneof query {
    kuksa.val.types.AttributedPath simplesub = 1;
    string                         sqlquery  = 2;
  }
}

// In case of simple queries, a list of length 1 will be returned when
// a subscribed datapoint is updated. In case of complex queries 
// SELECT a,b ... more than one datapoint might be in the notification
message SubscribeResponse {
  repeated kuksa.val.types.ResponseValue datapoints = 1;
}

